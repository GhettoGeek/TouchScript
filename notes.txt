Example of using br_table instruction to skip certain blocks of code based on a transient state value that resides on top of the stack



//high level
void main() {
  print "Enter your age: "
  let age: u32 = input()
  
  println "You are", age / 10, "decades old"
}



//psuedo-wasm
Import:
  $puts:       (i32) -> ()
  $put:        (i32) -> ()
  $putU32:     (i32) -> ()
  $requestU32: (i32) -> ()
Memory: 1 page
Global: $sp: i32 = 64
Data: @4 put "Enter your age: ", "You are", "decades old"


locals:

block void
  block void
    //if stack[sp] as i32 == 1, skip the outer block of code
    i32.get_global $sp
    i32.load, 2, 0
    br_table 2, (0, 1) 0
  end
  
  //print prompt
  i32.const &msg1
  call $puts
  
  //request input into a specific memory address
  i32.get_global $sp
  i32.const 4
  i32.add
  call $requestU32
  
  //skip the rest of the function because we don't have the input yet
  return
end

//print value we input earlier
i32.const &msg2
call $puts

i32_const ' '
call put

i32.get_global $sp
i32.const 4
i32.add
i32.load, 2, 0
i32.const 10
i32.div_u
call $printU32

i32_const ' '
call put

i32_const &msg3
call $puts

i32.const '\n'
call put

//reset the state
//the top of the stack must be set to 0 before exiting any exported function
i32.get_global $sp
i32.const 0
i32.store 2, 0