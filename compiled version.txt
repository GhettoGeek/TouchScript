//in general, stack[stackPtr] will contain a function's state

var stack = new int[1024]
var stackPtr = 0

func main() {
    while true {
        switch stack[stackPtr] {
            case 0:
                stack[stackPtr + 1] = 0
                stack[stackPtr] = 1
                break

            case 1:
                //read user input directly into main memory
                //I am using a pointer as an argument
                requestInputInt(& stack[stackPtr + 1], 0, int.max)
                stack[stackPtr] = 2
                return
            
            case 2:
                //stack[stackPtr + 1] contains user input

                //prepare call to testPatience()
                stack[stackPtr + 2] = 0
                stack[stackPtr + 3] = stack[stackPtr + 1]
                stack[stackPtr] = 3
                break;

            case 3:
                stackPtr += 2
                testPatience()
                stackPtr -= 2
                
                if stack[stackPtr + 2] == 0 {
                    //testPatience() method completed successfully
                    stack[stackPtr + 2] = stack[stackPtr + 3]
                    stack[stackPtr] = 4
                    break
                } else {
                    //testPatience() needs more interations
                    return
                }

            case 4:
                println("Your patience is", stack[stackPtr + 2])

                if (stack[stackPtr + 1] != 0) {
                    stack[stackPtr] = 1
                    break
                } else {
                    stack[stackPtr] = 0
                    return
                }
        }
    }
}

func testPatience() {
    //stack[stackPtr] is state
    //stack[stackPtr + 1] is argument

    while true {
        switch stack[stackPtr] {
            case 0:
                requestTimeout(stack[stackPtr + 1])
                stack[stackPtr] = 1
                return
            
            case 1:
                //either go back to the beginning or quit
                stack[stackPtr] = 0

                if stack[stackPtr + 1] > 0 {
                    --stack[stackPtr + 1]
                    break //go back to beginning
                }

                stack[stackPtr + 1] = 0
                return //quit
        }
    }
}

stack[stackPtr] = 0 //clear state of main()
main()